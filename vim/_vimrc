"显示当前行号
set ru

"用4个空格代替tab
set sts=4

"智能缩进
set cinoptions=:0,p0,t0
set cinw=if,else,while,do,for,switch,case
set formatoptions=tqo
set cin

"高亮
syn on

"搜索高亮
set hls
set incsearch

"在插入 tab 的时候用一定数量的空格数代替 tab
set et

"制表符的显示的空格个数
set ts=4

"控制 > 和 < 的移动空格数为4个
set sw=4

"在调用 :n 或 :N 命令时自动保存已经修改的文件。
set aw

"括号匹配
set showmatch

"设置代码折叠
set foldmethod=marker

"命令显示
set showcmd

" 显示括号配对情况
set magic
" 开启新行时使用智能自动缩进
set smartindent

"设置gf命令搜索路径
set path+=/usr/local/eyou/mail/app/lib/php,/usr/local/eyou/mail/web/php/user

"php缩进
let PHP_autoformatcomment=1

"设置状态栏显示信息
"set statusline=%F%m%r%h%w\[FORMAT=%{&ff}]\[TYPE=%Y]\[ASCII=\%03.3b]\[HEX=\%02.2B]\[POS=%04l,%04v][%p%%]\[LEN=%L]
set statusline=%F%m%r%h%w\[LINE=%04l]\[COL=%04v]\[LEN=%L]
set statusline=%F%m%r%h%w\[LINE=%04l]\[COL=%04v]\[LEN=%L]
set laststatus=2

" Set to auto read when a file is changed from the outside
set autoread

" Sets how many lines of history VIM har to remember
set history=400

"set paste
" 处理换行粘贴时断行的问题
if has("autocmd")
" In text files, always limit the width of text to 78 characters
"  autocmd BufRead *.txt set tw=78
autocmd BufRead *.txt set tw=1000
endif

" 删除所有行未尾空格。快捷键f12
nmap <F12> :%s/[ \t\r]\+$//g<CR>

"Paste toggle - when pasting something in, don't indent.
set pastetoggle=<F3>
"开启phpcomplete插件
filetype plugin on
autocmd FileType php set omnifunc=phpcomplete#CompletePHP

"开启php documentor插件
source /home/lpf/.vim/plugin/php-doc.vim
inoremap <C-P> <ESC>:call PhpDocSingle()<CR>i
nnoremap <C-P> :call PhpDocSingle()<CR>
vnoremap <C-P> :call PhpDocRange()<CR>

"配置taglist插件
set tags=tags;
set autochdir

" NERDTree
map <F10> :NERDTreeToggle<CR>

"功能说明:加入或删除注释//
"映射和绑定
nmap <C-C> <Esc>:Setcomment<CR>
imap <C-C> <Esc>:Setcomment<CR>
vmap <C-C> <Esc>:SetcommentV<CR>
command! -nargs=0 Setcomment call s:SET_COMMENT()
command! -nargs=0 SetcommentV call s:SET_COMMENTV()

"非视图模式下所调用的函数
function! s:SET_COMMENT()
    let lindex=line(".")
    let str=getline(lindex)
    "查看当前是否为注释行
    let CommentMsg=s:IsComment(str)
    call s:SET_COMMENTV_LINE(lindex,CommentMsg[1],CommentMsg[0])
endfunction

"视图模式下所调用的函数
function! s:SET_COMMENTV()
    let lbeginindex=line("'<") "得到视图中的第一行的行数
    let lendindex=line("'>") "得到视图中的最后一行的行数
    let str=getline(lbeginindex)
    "查看当前是否为注释行
    let CommentMsg=s:IsComment(str)
    "为各行设置
    let i=lbeginindex
    while i<=lendindex
         call s:SET_COMMENTV_LINE(i,CommentMsg[1],CommentMsg[0])
        let i=i+1
    endwhile
endfunction

"设置注释 
"index:在第几行
"pos:在第几列
"comment_flag: 0:添加注释符 1:删除注释符
function! s:SET_COMMENTV_LINE( index,pos, comment_flag )
    let poscur = [0, 0,0, 0]
    let poscur[1]=a:index
    let poscur[2]=a:pos+1
    call setpos(".",poscur) "设置光标的位置

    if a:comment_flag==0
        "插入//
        exec "normal! i//"
    else
        "删除//
        exec "normal! xx"
    endif
endfunction

"查看当前是否为注释行并返回相关信息
"str:一行代码
function! s:IsComment(str)
    let ret= [0, 0] "第一项为是否为注释行（0,1）,第二项为要处理的列，
    let i=0
    let strlen=len(a:str)
    while i<strlen
        "空格和tab允许为"//"的前缀
        if !(a:str[i]==' ' ||    a:str[i] == '  ' )
            let ret[1]=i
            if a:str[i]=='/' && a:str[i+1]=='/'
                let ret[0]=1
            else
                let ret[0]=0
            endif
            return ret
        endif
        let i=i+1
    endwhile
    return [0,0]  "空串处理
endfunction
